
# Connecting to an access point

Several wireless clients exist on Linux. The most common is WPA_SUPPLICANT.
We can connect to an open network using a configuration file:

	network={
	  ssid="hotel_wifi"
	  scan_ssid=1
	}

The above example allows the system to connect to an open network, called "hotel_wifi" as indiciated in the second line.
It scans for the SSIDs first.

Connecting to a WPA-PSK network is more involved, we need two more paramters:
	network={
	  ssid="home_network"
	  scan_ssid=1
	  psk="correct battery horse staple"
	  key_mgmt=WPA-PSK
	}

It will automatically choose between TKIP and CCMP based on availability (wpa_supplicant also supports WPA3).

Using the example in the above listing we'll create a file called wifi-client.conf.
Connecting to the home_network:

	sudo wpa_supplicant -i wlan0 -c wifi-client.conf

Once you connect to the network you can append -B to the command to run it in the background.

Once connected we usually request a DHCP lease using dhclient:
	sudo dhclient wlan0
	

# Setting up an access point 
Internet Access.

	sudo iw list
	
This command will display what modes each of the wireless interfaces supports.

# Creating a static IP on an access point wireless interfaces
You need to choose an IP address that does not conflict with the network and CIDR of the interface
that we just configured for the internet. Most routers offer an IP in the 192.168.1.0/24 range so we can use
the 10.0.0.0/24 range and set the wireless interface for the access point to 10.0.0.1

	sudo ip link set wlan0 up
	sudo ip addr add 10.0.0.1/24 dev wlan0
	
# DHCP Server
You can set up the DHCP server on the wireless interface using dnsmasq  which is a DNS / DHCP server.
You can create a configuration and save it as dnsmasq.conf:
	# Main options
	# http://www.thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html
	domain-needed
	bogus-priv
	no-resolv
	filterwin2k
	expand-hosts
	domain=localdomain
	local=/localdomain/
	# Only listen on this address. When specifying an 
	# interface, it also listens on localhost.
	# We don't want to interrupt any local resolution
	listen-address=10.0.0.1

	# DHCP range
	dhcp-range=10.0.0.100,10.0.0.199,12h
	dhcp-lease-max=100
	# Router: wlan0
	dhcp-option=option:router,10.0.0.1
	dhcp-authoritative

	# DNS: Primary and secondary Google DNS
	server=8.8.8.8
	server=8.8.4.4
	
Now that the configuration is complete run the command:
	sudo dnsmasq --conf-file=dnsmasq.conf
	
After startup, dnsmasq will create a file containing its process ID in /var/run/dnsmasq.pid,
which lets us find and kill the process when we are done. We will inspect syslog
to confirm it started successfully:
	sudo tail /var/log/syslog | grep dnsmasq
	
# Routing

We have to enable routing and add a few firewall rules to act as a router and allow
clients to reach the internet. We first have to enable IP forwarding, which we can do by:
	echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
	
To avoid packets getting dropped we ned to masquerade our IP as coming from the internet interface:
	sudo apt-get install nftables

Add the rule to masquerade our Wi-Fi client's IP addresses when traffic is going from the wireless
interface to one with Internet, like our home router does.

The first command adds the NAT table.

The second one adds a chain for postrouting that is necessary because masquerade edits the IP address
after the routing decision has been done and right before it gets out.

The last one is the rule doing the masquerade.

	sudo nft add table nat
	sudo nft 'add chain nat postrouting { type nat hook postrouting priority 100 ; }'
	sudo nft add rule ip nat postrouting oifname "eth0" ip daddr != 10.0.0.1/24 masquerade
	
# Access point mode

We have the access point left to configure and bring up.

For a simple 802.11n WPA2 PSK network called BTTF on Channel 11 with GreatScott as the passphrase the config is:

	interface=wlan0
	ssid=BTTF
	channel=11

	# 802.11n
	hw_mode=g
	ieee80211n=1

	# WPA2 PSK with CCMP
	wpa=2
	wpa_key_mgmt=WPA-PSK
	rsn_pairwise=CCMP
	wpa_passphrase=GreatScott
	
Listing 13 - hostapd configuration, hostapd.conf

Now we need to run hostapd and provide a single parameter, its configuration file:
	sudo hostapd hostapd.conf
	
Now that we can see hostapd is starting and clients connecting successfully, 
we can later run it in the background, by using -B parameter before the configuration filename.
